<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>疏间徒泍の旅途</title>
        <link>https://SJTdreams.github.io/</link>
        <description>Recent content on 疏间徒泍の旅途</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>疏间徒泍</copyright><atom:link href="https://SJTdreams.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Github使用日志</title>
        <link>https://SJTdreams.github.io/p/github%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/</link>
        <pubDate>Thu, 02 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/p/github%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/</guid>
        <description>&lt;img src="https://SJTdreams.github.io/p/github%E4%BD%BF%E7%94%A8%E6%97%A5%E5%BF%97/title.png" alt="Featured image of post Github使用日志" /&gt;&lt;h1 id=&#34;github使用日志&#34;&gt;Github使用日志
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在部署博客的过程中由于对github缺乏使用经验，导致了很多问题。于是决定在现在完成后记录一下github的使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;2020年GitHub的日志数达到了8.6亿条，活跃代码仓库达到了5,421万个，活跃开发者数达到了1,454万人，拥有超过3,100万开发人员和9,600多万个存储库。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;github和git的具体概念&#34;&gt;Github和Git的具体概念
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;首先，github和git是两个不同的概念。GitHub 本身是一个基于web的服务平台，其通过提供git仓库的托管进行服务。而git则是开源的&lt;a class=&#34;link&#34; href=&#34;https://baike.baidu.com/item/%e5%88%86%e5%b8%83%e5%bc%8f/19276232?fromModule=lemma_inlink&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;分布式&lt;/a&gt;版本控制系统，两者绝对不能混为一谈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;git并不是github独有的。包括&lt;strong&gt;Bitbucket&lt;/strong&gt;、&lt;strong&gt;SourceForge&lt;/strong&gt;、&lt;strong&gt;Gogs&lt;/strong&gt;、&lt;strong&gt;Gitbucket&lt;/strong&gt;、&lt;strong&gt;GitLab&lt;/strong&gt;、&lt;strong&gt;Gitee&lt;/strong&gt;、&lt;strong&gt;Azure DevOps&lt;/strong&gt;、&lt;strong&gt;Gitea&lt;/strong&gt;在内的多个平台使用的都是git。&lt;/p&gt;
&lt;h3 id=&#34;git的具体概念&#34;&gt;git的具体概念
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。&lt;/p&gt;
&lt;p&gt;Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。&lt;/p&gt;
&lt;p&gt;Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对象存储&lt;/strong&gt;：Git使用内容寻址文件系统来存储内容。每个文件和目录都以对象的形式存储，并通过SHA-1哈希值进行索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支管理&lt;/strong&gt;：在Git中，分支是一个引用（轻量级的分支）或是一个分支对象（重量级的分支）。分支切换实际上是改变当前HEAD指针的位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;索引（Index）&lt;/strong&gt;：Git的索引是一个准备区，用于暂存即将提交的文件变更。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;冲突解决&lt;/strong&gt;：当两个分支有冲突时，Git会标记出冲突的文件，需要手动解决冲突后才能进行合并。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;标签（Tag）&lt;/strong&gt;：用于标记特定的提交，通常用于版本发布。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;仓库（Repository）&lt;/strong&gt;：Git用来保存项目文件和版本历史的数据库。每个项目都有一个Git仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;提交（Commit）&lt;/strong&gt;：项目文件的一个快照，包括文件的内容和元数据（如作者、日期、提交信息）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;分支（Branch）&lt;/strong&gt;：指向特定提交的可移动的指针，用于隔离开发流程的不同部分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;合并（Merge）&lt;/strong&gt;：将两个或多个不同的开发历史合并在一起。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;克隆（Clone）&lt;/strong&gt;：创建一个仓库的副本，包括所有文件和提交历史。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;远程仓库（Remote Repository）&lt;/strong&gt;：托管在服务器上的仓库，可以是GitHub、GitLab等。&lt;/p&gt;
&lt;h3 id=&#34;github的具体概念&#34;&gt;github的具体概念
&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;GitHub是一个面向&lt;a class=&#34;link&#34; href=&#34;https://baike.baidu.com/item/%e5%bc%80%e6%ba%90/20720669?fromModule=lemma_inlink&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;开源&lt;/a&gt;及私有软件项目的托管平台，因为只支持Git作为唯一的版本库格式进行托管，故名GitHub。GitHub拥有1亿以上的开发人员，400万以上组织机构和3.3亿以上资料库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码托管&lt;/strong&gt;：GitHub允许用户托管Git仓库，并提供了一个图形界面来浏览代码、提交历史、分支和标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协作工具&lt;/strong&gt;：GitHub提供了issues（问题跟踪系统）、pull requests（代码审查和合并请求）、wikis（项目文档）和项目看板等工具，以支持团队协作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;社交功能&lt;/strong&gt;：GitHub有关注（following）、星标（starring）、观察（watching）等社交功能，允许用户跟踪项目和开发者的活动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;集成和自动化&lt;/strong&gt;：GitHub提供了API和Webhooks，允许开发者集成外部服务和自动化工作流程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;代码审查和合并&lt;/strong&gt;：通过pull requests，GitHub支持代码审查和讨论，确保代码质量，并简化合并流程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;github的具体使用&#34;&gt;Github的具体使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GitHub允许你创建一个远程库。需要通过git来将本地的库同步到github中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github允许你提交一个&lt;strong&gt;SSH&lt;/strong&gt;密钥到账号。SSH允许你无需账号密码来同步文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github包含一个&lt;strong&gt;Issues&lt;/strong&gt;，用于追踪项目中的错误和功能请求。可以在仓库的页面上找到New issue，填写相关信息后提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github允许你通过&lt;strong&gt;Pull Requests&lt;/strong&gt;来请求将某个分支的变更合并到主分支，便于代码审查。在仓库页面，点击&amp;quot;Pull requests&amp;quot;，然后点击&amp;quot;New pull request&amp;quot;，选择要合并的分支，添加更改说明后提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github包含一个&lt;strong&gt;Wikis&lt;/strong&gt;，可以在仓库中托管项目文档。在仓库页面，点击&amp;quot;Wiki&amp;quot;标签，然后点击&amp;quot;Add or edit pages&amp;quot;，创建或编辑文档页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github包含&lt;strong&gt;GitHub Actions&lt;/strong&gt;可以实现自动化部署和持续集成（CI/CD）。例如在同步仓库时自动更新readme等操作。若要使用，则需在仓库的&lt;code&gt;.github/workflows&lt;/code&gt;目录下创建一个YAML文件，定义工作流程和触发条件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github还包含&lt;strong&gt;Stars&lt;/strong&gt;（点赞/关注）、&lt;strong&gt;Forks&lt;/strong&gt;（克隆）、&lt;strong&gt;Watching&lt;/strong&gt;（订阅）等内容。这是一种用户间的互动。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Github可以创建组织，方便同步文件。登录GitHub账户，点击右上角的&amp;quot;+&amp;ldquo;号，选择&amp;quot;New organization&amp;rdquo;，填写组织信息后创建。在组织的页面，点击&amp;quot;Teams&amp;quot;，然后点击&amp;quot;New team&amp;quot;，设置团队名称和成员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;git的具体使用&#34;&gt;Git的具体使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;git的本地仓库包含三个部分：其一是工作目录，其保存着实际的文件。其二是暂存区，类似于缓存，保存临时改动。其三是HEAD区，指向最后一次提交的结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git init&lt;/code&gt;：初始化一个git仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git clone path&lt;/code&gt;：克隆一个本地仓库。把&lt;strong&gt;path&lt;/strong&gt;换成具体路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git clone [url]&lt;/code&gt;：克隆一个远程仓库。包含https克隆和SSH克隆。https的链接通常类似于这样：&lt;u&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/username/repository.git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/username/repository.git&lt;/a&gt;&lt;/u&gt;。SSH的链接通常类似于这样：&lt;u&gt;git clone &lt;a class=&#34;link&#34; href=&#34;mailto:git@github.com&#34; &gt;git@github.com&lt;/a&gt;:username/repository.git&lt;/u&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;：添加文件到暂存区。如果filename为**&lt;code&gt;.&lt;/code&gt;**（就是一个点）就是指当前目录下的所有文件。文件名不添加路径则是当前目录下的文件。当选择的是文件夹会递归的添加其下的所有文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git add -u&lt;/code&gt;：这个命令只添加已经跟踪的文件（即之前已经添加到Git仓库的文件），不包括新文件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add -A&lt;/code&gt; / &lt;code&gt;git add --all&lt;/code&gt;：这些命令添加所有变化的文件和新文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git commit -m &amp;quot;代码提交信息&amp;quot;&lt;/code&gt;：将改动提交到HEAD。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push origin master&lt;/code&gt;：将这些改动推送到远端仓库。其中，&lt;strong&gt;origin&lt;/strong&gt;是远程仓库的默认名称，当你克隆一个远程仓库时，Git 自动将远程仓库的引用设置为 &lt;code&gt;origin&lt;/code&gt;。这个名称是可替的。master是提交分支名，可以自行更改。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote -v&lt;/code&gt;：查看远程仓库的URL，&lt;code&gt;origin&lt;/code&gt; 会显示在列表中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git remote add new_origin &amp;lt;repository_url&amp;gt;&lt;/code&gt;：添加一个新的远程仓库，命名为&lt;strong&gt;new_origin&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt;是git的默认分支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout feature_x&lt;/code&gt;：切换到某个分支。&lt;strong&gt;feature_x&lt;/strong&gt;是该分支的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -b feature_x&lt;/code&gt;：创建并切换到某个分支，&lt;strong&gt;feature_x&lt;/strong&gt;是该分支的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git branch -d feature_x&lt;/code&gt;：删除某个分支，&lt;strong&gt;feature_x&lt;/strong&gt;是该分支的名称。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git push origin &amp;lt;branch&amp;gt;&lt;/code&gt;：推送这个分支。没有推送的分支在远程上是不可见的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull [remote] [branch]&lt;/code&gt;:从远程仓库拉取代码变更，并尝试将这些变更自动合并到当前本地分支。&lt;code&gt;[remote]&lt;/code&gt;：这是远程仓库的名称，默认是 &lt;code&gt;origin&lt;/code&gt;。&lt;code&gt;branch&lt;/code&gt;：这是远程仓库中你想要拉取的分支名称。如果你不指定 &lt;code&gt;[remote]&lt;/code&gt; 和 &lt;code&gt;branch&lt;/code&gt;，Git 会默认拉取 &lt;code&gt;origin&lt;/code&gt; 远程仓库中与当前本地分支关联的分支的变更。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git merge &amp;lt;branch&amp;gt;&lt;/code&gt;：合并一个分支到当前分支。&lt;strong&gt;branch&lt;/strong&gt;是该分支的名称（&amp;lt;&amp;gt;是不要的）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git diff &amp;lt;source_branch&amp;gt; &amp;lt;target_branch&amp;gt;&lt;/code&gt;：预览两个分支的差异。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;：获得提交ID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git tag 1.0.0 id&lt;/code&gt;：创建一个叫做 &lt;em&gt;1.0.0&lt;/em&gt; 的标签。id指提交 ID 的前 10 位字符。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git checkout -- &amp;lt;filename&amp;gt;&lt;/code&gt;：使用 HEAD 中的最新内容替换掉你的工作目录中的文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git fetch [remote]&lt;/code&gt;：从远程仓库获取数据，并下载远程分支的更新和提交，但不会自动合并这些更改到你的本地分支。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git reset [--hard] [&amp;lt;commit&amp;gt;]&lt;/code&gt;：重置当前HEAD和索引（暂存区）。&lt;code&gt;[--hard]&lt;/code&gt;：这是一个可选的选项，表示重置时连同工作目录一起重置，即放弃所有本地未提交的更改。&lt;code&gt;[&amp;lt;commit&amp;gt;]&lt;/code&gt;：这是一个占位符，表示你想要重置到的特定的提交（commit）。可以是一个分支名、标签或者提交的哈希值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;gitk&lt;/code&gt;：图形化git。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git config color.ui true/false&lt;/code&gt;开启/关闭彩色输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git config format.pretty oneline&lt;/code&gt;：显示历史记录时，每个提交的信息只显示一行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git add -i&lt;/code&gt;：交互式添加文件到暂存区。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;具体语法实例&#34;&gt;具体语法实例：
&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;47
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;48
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;49
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;50
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;51
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;52
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;53
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;54
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;55
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;56
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;57
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;58
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;59
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;60
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;61
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;62
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;63
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;64
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;65
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;66
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;67
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;68
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 初始化一个Git仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 克隆一个远程仓库到本地
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/username/repository.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 添加文件到暂存区
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add index.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 添加所有变化的文件和新文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add -A
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 添加已经跟踪的文件（不包括新文件）
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add -u
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 提交暂存区的更改到本地仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git commit -m &amp;#34;Add index.md with Github usage log&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看远程仓库的URL
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote -v
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 添加一个新的远程仓库引用
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git remote add origin https://github.com/username/repository.git
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 推送本地仓库的更改到远程仓库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git push -u origin master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 从远程仓库拉取代码变更，并合并到当前本地分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git pull origin master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 合并远程分支的更改到当前分支
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git merge origin/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 显示两个分支的差异
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git diff master feature_x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 查看提交历史
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git log
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 创建一个标签
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git tag 1.0.0 &amp;lt;commit_id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检出标签对应的提交
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout 1.0.0
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 检出HEAD中的最新内容替换工作目录中的文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git checkout -- index.md
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 从远程仓库获取数据，但不自动合并
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git fetch origin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 重置当前HEAD和索引（暂存区）到指定的提交
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --hard &amp;lt;commit_id&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 重置当前HEAD和索引（暂存区）到远程分支的状态
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git reset --hard origin/master
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 打开图形化Git工具
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;gitk
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 开启/关闭彩色输出
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global color.ui true
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 显示历史记录时，每个提交的信息只显示一行
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git config --global format.pretty oneline
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 交互式添加文件到暂存区
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git add -i
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Git 作为一个开源的分布式版本控制系统，以其高效和灵活性被广泛应用于各种项目中。而 GitHub，作为一个基于 Web 的服务平台，提供了 Git 仓库托管和丰富的协作工具，极大地方便了开发者之间的代码共享和项目管理。&lt;/li&gt;
&lt;li&gt;本篇涉及了了 Git 的核心特性，和基础语法，大概阐释了涉及到的概念。可以作为我自身的查档用，也有一定的参考价值。&lt;/li&gt;
&lt;li&gt;GitHub 的主要语法和操作实际上基于 Git，而 GitHub 则作为远程仓库的角色，使得代码的远程托管和管理变得更加便捷。希望本文能帮助您更好地理解和使用 Git 和 GitHub，提高您的工作效率，并在开源社区中发挥更大的作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关资料&#34;&gt;相关资料
&lt;/h2&gt;&lt;p&gt;* &lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/manual/git-guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;git - 简明指南&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://www.runoob.com/git/git-tutorial.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git 教程|菜鸟编程&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://baike.baidu.com/item/github/10145341&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github-百度百科&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://baike.baidu.com/item/GIT/12647237&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git-百度百科&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git官方文档&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/Git&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git维基百科&lt;/a&gt;
* &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/GitHub&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Github维基百科&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>机器学习线性代数学习笔记</title>
        <link>https://SJTdreams.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;img src="https://SJTdreams.github.io/p/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/title.png" alt="Featured image of post 机器学习线性代数学习笔记" /&gt;&lt;h1 id=&#34;机器学习-线性代数学习笔记&#34;&gt;机器学习 线性代数学习笔记
&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇是在学习过程中写的，可能会存在疏漏，欢迎补充！&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“人工智能是我们人类正在从事的最为深刻的研究方向之一，甚至要比火与电还更加深刻。”&lt;/p&gt;
&lt;p&gt;​											——桑德尔·皮猜（Sundar Pichai）, 2020&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本人观看地址：https://www.bilibili.com/video/BV1Pg4y1X7Pa/?spm_id_from=333.337.search-card.all.click&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-数学基础在ai学习中的作用&#34;&gt;1. 数学基础在AI学习中的作用
&lt;/h1&gt;&lt;h2 id=&#34;11-数学基础在ai研究中的必要性&#34;&gt;1.1 数学基础在AI研究中的必要性
&lt;/h2&gt;&lt;p&gt;AI训练、学习和研究的的过程中存在大量涉及数学的要点。良好的数学基础是必要的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;理论支撑&lt;/strong&gt;：存在大量的AI模型理论都依靠大量的数学基础。深度学习的原理上涉及到了大量的线性代数运算，如点积、矩阵乘法等。而微积分也在各种损失函数、计算梯度上运用广泛。例如训练神经网络的核心算法：反向传播，就涉及到了大量的微积分知识。大名鼎鼎的框架TensorFlow，直译就是“张量流动”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模型优化&lt;/strong&gt;：在AI模型的训练过程中，优化算法如梯度下降法需要用到微积分的知识。数学能够帮助我们分析和选择最佳的学习率，从而加速模型的收敛，提高模型性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据分析&lt;/strong&gt;：AI领域中的数据预处理、特征提取等步骤都涉及到统计学和概率论。这些数学工具帮助我们从数据中提取有价值的信息，为模型训练提供支持。例如，可用通过统计学识别异常值，处理缺失值等。而将数据标准化和归一化也涉及到数学。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法创新&lt;/strong&gt;：数学是推动AI算法创新的关键。许多新的AI算法，如卷积神经网络（CNN）和循环神经网络（RNN），都是基于数学理论的创新。CNN运用了数学上的互相关运算，而RNN的时间序列也是矩阵表示的，RNN的预测还涉及到了马尔科夫链(概率论)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;12-可能涉及到的数学内容&#34;&gt;1.2 可能涉及到的数学内容
&lt;/h2&gt;&lt;p&gt;以下是各种数学领域可能涉及到的深度学习内容:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线性代数&lt;/strong&gt;：在线性代数中，矩阵和向量运算是构建和理解神经网络的基础。矩阵的乘法、转置、逆等操作在神经网络的前向传播和反向传播中扮演着核心角色。线性代数极大程度的简化了模型的表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;概率论与数理统计&lt;/strong&gt;：评估、选择模型，数据处理，决策优化等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;微积分&lt;/strong&gt;：涉及到梯度下降，反向传播与正向传播，处理损失函数，进行正则化，卷积操作，一些其他的优化算法（如牛顿法、拟牛顿法等）等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;信息论&lt;/strong&gt;：评估特征信息量，量化模型复杂度，数据压缩等。其中的交叉熵损失函数广泛运用于分类、目标检测和NLP（自然语言处理）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;与均方误差（MSE）相比，交叉熵损失函数在处理分类问题时通常更具优势，因为它直接衡量模型对于类别分布的拟合程度，而MSE则通过最小化预测值与真实值之间的平方差来评估模型性能，这在分类问题中可能不够直观&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;综上所述，数学在AI中的运用极度广泛。它不仅为AI算法提供了理论支持，而且在模型设计、训练和优化过程中发挥着关键作用。&lt;/p&gt;
&lt;h1 id=&#34;2-线性代数的核心概念&#34;&gt;2. 线性代数的核心概念
&lt;/h1&gt;&lt;h2 id=&#34;21-矩阵的定义与应用&#34;&gt;2.1 矩阵的定义与应用
&lt;/h2&gt;&lt;p&gt;矩阵是线性代数中的一个基本概念，由数排成的矩形阵列，常用于线性方程组的系数表示、线性变换等。矩阵可以在某种程度上视为一个用于存放方程系数的二维系统，并且可以通过保持奇异性的行操作化简成行阶梯形。矩阵的广泛应用是线性代数中的核心，以下是矩阵的一些关键应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线性方程组&lt;/strong&gt;：矩阵可以用来表示线性方程组，通过矩阵运算可以求解方程组的解（例如可以通过高斯消元法求解），这对于理解和设计AI算法中的优化问题至关重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据表示&lt;/strong&gt;：在机器学习中，数据通常以矩阵的形式表示，其中每一行代表一个样本，每一列代表一个特征。这种表示方法便于算法处理和分析。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;变换&lt;/strong&gt;：矩阵可以表示线性变换，如图像处理中的旋转、缩放等操作，这些都是计算机视觉中的基础操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;神经网络&lt;/strong&gt;：在深度学习中，神经网络的权重和输入数据都以矩阵的形式存在，矩阵乘法是前向传播和反向传播中的基本操作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-单位矩阵与逆矩阵&#34;&gt;2.2 单位矩阵与逆矩阵
&lt;/h2&gt;&lt;p&gt;单位矩阵和逆矩阵是矩阵理论中的重要概念，它们在解决线性方程组和线性变换中扮演着关键角色。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;单位矩阵&lt;/strong&gt;：单位矩阵是一个方阵，其主对角线上的元素都是1，其余元素都是0。单位矩阵与任何向量执行点积，其结果等于该向量。对单位矩阵做线性变换得到的基向量不变，这是因为单位矩阵代表了线性变换中的“无操作”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;逆矩阵&lt;/strong&gt;：逆矩阵与原矩阵的乘积等于单位矩阵。逆矩阵可以通过解方程计算得到。非奇异的矩阵总是有逆的（可逆矩阵），而奇异的矩阵总是无逆的。奇异的方程的行列式必然为0，这就像是数字0没有逆元一样。互为逆矩阵的矩阵的行列式互为倒数。刚好1/0是未定义的，奇异的矩阵无逆矩阵。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$
    det({A}^{-1})=\frac {1} {det(A)}
    $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-向量的基本性质&#34;&gt;2.3 向量的基本性质
&lt;/h2&gt;&lt;p&gt;向量是线性代数中的另一个核心概念，核心要素包括方向和大小，可以视为指向某个坐标的箭头。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;范数&lt;/strong&gt;：向量的范数是衡量向量“长度”的一种方式。默认的L2范数是向量内所有数平方和的平方根，而曼哈顿距离（L1范数）是向量内所有数的绝对值之和。这些范数在不同的应用场景中有着不同的用途，如在优化问题中，选择合适的范数可以帮助我们得到不同的优化结果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正交性&lt;/strong&gt;：当两个向量是正交的时，这两个向量的点积为0。这个性质在机器学习中的特征选择和降维中非常重要，因为它可以帮助我们识别和消除特征之间的相关性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;投影&lt;/strong&gt;：两个向量成角度的向量的点积，等同于其中一个向量对另一个向量做投影得到的向量与另一个向量的点积。这说明可以用投影的正负确定点积的正负，一定程度上可以理解为，点积值为正的两个向量夹角必然小于90度。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-线性代数的深入理解&#34;&gt;3. 线性代数的深入理解
&lt;/h1&gt;&lt;h2 id=&#34;31-奇异性与非奇异性&#34;&gt;3.1 奇异性与非奇异性
&lt;/h2&gt;&lt;p&gt;在线性代数中，奇异性与非奇异性是描述矩阵性质的两个重要概念。它们对于理解矩阵的可逆性、解的存在性以及线性方程组的解空间至关重要。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;奇异性定义&lt;/strong&gt;：简单而言，一个不具备冗余和矛盾信息的句子系统或方程组是非奇异的。非奇异方程组在一般情况下通常可解，而奇异方程在一般情况下通常不可解。这可以通过行列式法或秩判定法来判断。行列式法涉及将矩阵按照两个方向划分为数条对角线，若各自乘积之和相等则是奇异的。秩判定法则是看方阵的秩是否小于其阶数，若是，则矩阵是奇异的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据科学中的应用&lt;/strong&gt;：在数据科学中，奇异性与非奇异性的概念对于理解数据集的线性独立性非常重要。一个非奇异的数据矩阵意味着数据集中没有冗余的特征，这有助于避免在机器学习模型中出现过拟合现象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数值计算中的影响&lt;/strong&gt;：在数值计算中，奇异矩阵可能导致算法的不稳定和数值误差的放大。例如，在求解线性方程组或者进行矩阵求逆时，奇异矩阵可能会导致算法失败或者结果不准确。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;32-秩的概念及其重要性&#34;&gt;3.2 秩的概念及其重要性
&lt;/h2&gt;&lt;p&gt;秩是矩阵的一个基本属性，它描述了矩阵中线性无关的行或列的最大数量，反映了矩阵所包含的“有效”信息的多少。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;秩的定义&lt;/strong&gt;：矩阵的秩是矩阵中线性无关的行（或列）向量的最大个数。它决定了线性方程组中独立方程的个数，进而影响方程组解的情况。秩的概念在信息论中也非常重要，因为它可以衡量矩阵信息量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;秩与数据压缩&lt;/strong&gt;：在数据压缩和降维领域，秩的概念被用来识别最重要的特征。通过降低数据矩阵的秩，我们可以去除不重要的噪声和冗余信息，从而实现数据的有效压缩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;秩与机器学习&lt;/strong&gt;：在机器学习中，秩的概念可以帮助我们理解模型的复杂度。例如，在主成分分析（PCA）中，我们通过选择前几个主成分来降低数据的维度，这些主成分的数目通常与数据矩阵的秩有关。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;秩与线性方程组&lt;/strong&gt;：在线性方程组中，系数矩阵的秩决定了方程组解的性质。如果系数矩阵的秩等于增广矩阵的秩且小于变量的数目，则方程组有无穷多解；如果秩等于变量的数目，则方程组有唯一解；如果秩小于变量的数目，则方程组无解。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-行阶梯形式与高斯消元法&#34;&gt;4. 行阶梯形式与高斯消元法
&lt;/h1&gt;&lt;h2 id=&#34;41-行阶梯形式的特点&#34;&gt;4.1 行阶梯形式的特点
&lt;/h2&gt;&lt;p&gt;行阶梯形式是线性代数中对矩阵进行化简的一种重要形式，它通过保持奇异性的行操作对矩阵进行化简。以下是行阶梯形式的一些关键特点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;主元位置&lt;/strong&gt;：每一行最左边的非0数被称为主元，主元数等于秩的值。每一行的主元必然位于上一行的右方，这保证了矩阵的上三角结构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;全零行&lt;/strong&gt;：矩阵的全零行只能出现在矩阵的下部，且如果出现了全零行，该矩阵是奇异的。这一点是判断矩阵是否奇异的重要依据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;化简过程&lt;/strong&gt;：通过将每个主元所在列的其他数字化为0得到的矩阵被称为简化行梯形式。这个过程有助于进一步简化矩阵，使其更易于处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;非奇异性判定&lt;/strong&gt;：当且仅当主元的数等于阶数的矩阵是非奇异的。这意味着，如果一个矩阵在其行阶梯形式中每一行和每一列都有一个主元，则该矩阵是非奇异的，反之则为奇异。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;对角线特性&lt;/strong&gt;：在行阶梯形式中，主对角线以下的所有元素都是0，这使得矩阵的结构更加清晰，便于进行后续的计算和分析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;42-高斯消元法的应用&#34;&gt;4.2 高斯消元法的应用
&lt;/h2&gt;&lt;p&gt;高斯消元法是一种用于求解线性方程组的算法，它通过行操作将增广矩阵转换为行阶梯形式或简化行阶梯形式，从而得出方程组的解。以下是高斯消元法的一些关键应用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方程求解&lt;/strong&gt;：高斯消元法可以将线性方程组的系数矩阵和常数项矩阵合并为一个增广矩阵，然后通过行操作将其转换为行阶梯形式，从而求解方程组。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法效率&lt;/strong&gt;：高斯消元法在数值计算中非常高效，尤其是对于大规模的线性方程组。它的效率在于能够逐步消去变量，减少计算量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数值稳定性&lt;/strong&gt;：高斯消元法在执行过程中可以通过部分选主元等策略来提高数值稳定性，减少计算过程中的舍入误差。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;矩阵求逆&lt;/strong&gt;：高斯消元法也可以用来求解矩阵的逆。通过将单位矩阵与原矩阵增广，然后执行高斯消元，可以得到原矩阵的逆矩阵。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线性代数的基础&lt;/strong&gt;：高斯消元法是理解线性代数中许多其他概念和算法的基础，如矩阵分解、LU分解等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;在AI中的应用&lt;/strong&gt;：在AI领域，高斯消元法可以用于求解优化问题中的线性方程组，如在支持向量机（SVM）的训练过程中求解拉格朗日乘子。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过对行阶梯形式和高斯消元法的深入理解，我们可以更好地掌握线性代数在解决实际问题中的应用，尤其是在AI领域的算法实现和数据分析中。&lt;/p&gt;
&lt;h1 id=&#34;5-线性代数中的运算&#34;&gt;5. 线性代数中的运算
&lt;/h1&gt;&lt;h2 id=&#34;51-向量运算&#34;&gt;5.1 向量运算
&lt;/h2&gt;&lt;p&gt;向量运算是线性代数中的基础，它们在AI领域的数据处理和特征工程中扮演着重要角色。以下是向量运算的一些关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向量-向量加法&lt;/strong&gt;：向量加法可以通过平行四边形法则来理解，其结果向量的坐标是两个向量对应坐标的和。在实际计算中，向量加法是按元素相加的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向量-向量减法&lt;/strong&gt;：向量减法可以视为求两个向量差的运算，结果向量的坐标是两个向量对应坐标的差。在实际计算中，向量减法是按元素相减的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向量-标量乘法&lt;/strong&gt;：向量与标量的乘法是将向量的每个元素乘以该标量，结果向量的每个元素都是原向量对应元素与标量的乘积。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;向量-向量乘法（点积）&lt;/strong&gt;：两个向量的点积是对应元素乘积的和。点积的结果是一个标量，它具有几何意义，如计算两个向量之间的夹角和相似度。在AI中，点积常用于特征归一化和相似性度量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转置&lt;/strong&gt;：向量的转置是将行向量转换为列向量，或将列向量转换为行向量。在矩阵运算中，转置操作常用于改变数据的布局以适应特定的计算需求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;52-矩阵运算&#34;&gt;5.2 矩阵运算
&lt;/h2&gt;&lt;p&gt;矩阵运算是线性代数中的核心，它们在AI算法的实现中至关重要。以下是矩阵运算的一些关键点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;矩阵-向量乘法&lt;/strong&gt;：矩阵与向量的乘法是将矩阵的每一行与向量进行点积操作，结果是一个向量。在神经网络中，这种运算用于实现前向传播和反向传播。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;转置&lt;/strong&gt;：矩阵的转置是将矩阵的行和列互换，即原矩阵的第i行第j列元素变成转置矩阵的第j行第i列元素。转置操作在AI中用于调整数据维度，如在图像处理和特征变换中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;矩阵-矩阵乘法&lt;/strong&gt;：矩阵乘法是通过第一个矩阵的每一行与第二个矩阵的每一列的点积来计算的。矩阵乘法在AI中用于实现复杂的变换，如卷积神经网络中的卷积操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;矩阵-矩阵乘法有一个&lt;u&gt;特性&lt;/u&gt;：两个矩阵相乘再计算行列式的值会等于这两个矩阵的行列式的积。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
    det(AB)=det(A)⋅det(B)
    $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;而因为奇异矩阵的行列式为0，因此&lt;u&gt;&lt;strong&gt;任何&lt;/strong&gt;&lt;/u&gt;矩阵与奇异矩阵相乘都会等于0。这一点也可以说明为什么奇异的矩阵没有逆元，因为单位矩阵是非奇异的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线性变换&lt;/strong&gt;：矩阵可以表示线性变换，这种变换将平面上的点映射到另一个点。在AI中，线性变换用于特征提取和数据降维，如主成分分析（PCA）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过对线性代数中的向量和矩阵运算的深入理解，我们可以更好地掌握这些运算在AI领域的应用，从而在算法设计和数据分析中做出更合理的决策。&lt;/p&gt;
&lt;h1 id=&#34;6-线性变换及其应用&#34;&gt;6. 线性变换及其应用
&lt;/h1&gt;&lt;h2 id=&#34;61-线性变换的定义&#34;&gt;6.1 线性变换的定义
&lt;/h2&gt;&lt;p&gt;线性变换是线性代数中的一个重要概念，它描述了一种特殊的函数，这种函数将向量空间中的元素映射到同一空间或另一个向量空间中的元素，同时保持向量加法和标量乘法的操作不变。具体来说，如果有一个函数 \( T \) 从向量空间 \( V \) 映射到向量空间 \( W \)，对于任意向量 \( \mathbf{u}, \mathbf{v} \in V \) 和任意标量 \( c \)，满足以下两个条件，则 \( T \) 是一个线性变换：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
$$
   T(\mathbf{u} + \mathbf{v}) = T(\mathbf{u}) + T(\mathbf{v})
   $$&lt;/li&gt;
&lt;li&gt;
$$
   T(c\mathbf{u}) = cT(\mathbf{u})
   $$&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;线性变换在AI领域中的应用非常广泛，包括图像处理、语音识别、自然语言处理等。例如，在图像处理中，线性变换可以用于图像的旋转、缩放和剪切等操作；在自然语言处理中，线性变换可以用于词向量的转换和文本的特征提取。&lt;/p&gt;
&lt;h2 id=&#34;62-线性变换与基向量&#34;&gt;6.2 线性变换与基向量
&lt;/h2&gt;&lt;p&gt;基向量是定义向量空间的一个关键概念，它们是一组线性无关的向量，可以用来表示空间中的任何向量。在线性变换中，基向量扮演着至关重要的角色，因为线性变换可以看作是基向量在变换下的映射。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基向量的变换&lt;/strong&gt;：对于一个给定的线性变换 \( T \)，如果我们知道基向量在 \( T \) 下的像，那么我们就可以确定 \( T \) 对空间中任何向量的作用。这是因为空间中的任何向量都可以表示为基向量的线性组合，而 \( T \) 的线性保证了它对线性组合的作用可以通过对基向量的作用来确定。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
  \{\mathbf{v}_1, \mathbf{v}_2, ..., \mathbf{v}_n\}
  $$$$
  \{\mathbf{w}_1, \mathbf{w}_2, ..., \mathbf{w}_m\} 
  $$$$
  m \times n
  $$$$
  \mathbf{v}_i 
  $$&lt;p&gt;
在 \( T \) 下的像，以 \( W \) 的基向量表示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;维度与秩&lt;/strong&gt;：线性变换的秩，即变换后图像的维度，等于变换矩阵的秩。如果变换是非奇异的，那么秩等于基向量的数量，这意味着基向量在变换后仍然覆盖整个空间。如果变换是奇异的，那么秩小于基向量的数量，这意味着基向量在变换后覆盖的空间降维了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;行列式与体积变化&lt;/strong&gt;：对于非奇异的线性变换，行列式的绝对值表示变换后基向量形成的平行六面体的体积与变换前基向量形成的单位立方体体积的比率。如果行列式的值为零，则变换是奇异的，基向量在变换后形成的体积为零，即所有的基向量映射到了一个低维空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;面积特征&lt;/strong&gt;：线性变换对于单位基向量的变换后的图像的面积等于行列式的值的绝对值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当行列式为负时，线条会颠倒。某种程度上可以把这视为负面积值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
    S = |\det(A)|
    $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过对线性变换和基向量的深入理解，我们可以更好地把握线性代数在AI领域的应用，从而在算法设计和数据分析中做出更合理的决策。线性变换提供了一种强大的工具，用于分析和处理高维数据，而基向量则为我们提供了一种直观的方式来理解和操作这些变换。&lt;/p&gt;
&lt;h1 id=&#34;7张成和基&#34;&gt;7.张成和基
&lt;/h1&gt;&lt;h2 id=&#34;71-张成的概念与基的概念&#34;&gt;7.1 张成的概念与基的概念
&lt;/h2&gt;&lt;p&gt;​	张成不仅帮助我们理解向量之间的线性关系，还为定义和研究线性空间的结构提供了基础。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;张成的概念&lt;/strong&gt;：张成是一定的向量能够通过一定数量的重复叠加所能达到的所有位置。具体来说，给定一个向量集合 &lt;em&gt;S&lt;/em&gt;=&lt;em&gt;{v1,v2,…,vn}&lt;/em&gt;，这个集合的张成（span）就是所有可以表示为这些向量的线性组合的向量的集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基的概念&lt;/strong&gt;：基是一个最小（向量数量）的张成集。只有线性独立的向量才能构成基。基的向量数等同于该空间数的维度。&lt;/p&gt;
&lt;h2 id=&#34;72-基的特点&#34;&gt;7.2 基的特点
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性无关性&lt;/strong&gt;：只有线性独立的向量才能构成基。线性独立指你无法通过同组的其他向量构成该向量。
&lt;ul&gt;
&lt;li&gt;关于线性独立与奇异性的联系：考虑一个 n*×&lt;em&gt;n 的方阵 A&lt;/em&gt;，其列向量为 {v1,v2,…,vn}。
&lt;ul&gt;
&lt;li&gt;如果 &lt;em&gt;A&lt;/em&gt; 的列向量是线性独立的，那么 &lt;em&gt;A&lt;/em&gt; 是非奇异的，即 &lt;em&gt;A&lt;/em&gt; 有逆矩阵。&lt;/li&gt;
&lt;li&gt;如果 &lt;em&gt;A&lt;/em&gt; 的列向量是线性相关的，那么 &lt;em&gt;A&lt;/em&gt; 是奇异的，即 &lt;em&gt;A&lt;/em&gt; 没有逆矩阵。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;张成性&lt;/strong&gt;：基中的向量可以线性组合生成整个向量空间中的任何向量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小性&lt;/strong&gt;：基是包含在向量空间中的最小向量集合，它既线性无关又张成整个空间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;唯一性&lt;/strong&gt;：对于给定的向量空间，基不是唯一的，但任何两个基都包含相同数量的向量，这个数量就是空间的维度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;73-特征基&#34;&gt;7.3 特征基
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过特征向量构成的基被称为特征基。对于一个用于线性变换的矩阵，如果存在某一个（组）向量，通过该矩阵线性变换后只是缩放或反转，而非拉伸和扭曲，则称该基为这个矩阵的特征向量。可以用公式这样表示，其中&lt;em&gt;&lt;strong&gt;A&lt;/strong&gt;&lt;/em&gt;是一个矩阵，&lt;em&gt;&lt;strong&gt;v&lt;/strong&gt;&lt;/em&gt;是一个向量，&lt;em&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;/em&gt;是一个标量：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
    Av = \lambda v
    $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在以上的定义公式中，&lt;em&gt;&lt;strong&gt;λ&lt;/strong&gt;&lt;/em&gt; 被称为特征向量 &lt;em&gt;&lt;strong&gt;v&lt;/strong&gt;&lt;/em&gt;的特征值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以通过计算&lt;strong&gt;标量-向量乘法&lt;/strong&gt;来代替&lt;strong&gt;矩阵-向量乘法&lt;/strong&gt;，这有效的降低了计算量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h3 id=&#34;特征向量具体的计算过程及原理&#34;&gt;特征向量具体的计算过程及原理：
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为特征向量在矩阵上只是缩放，因此变换后与变换前是&lt;u&gt;线性相关&lt;/u&gt;的。设存在一个特殊的矩阵，其满足将单位向量放大&lt;em&gt;m&lt;/em&gt;倍：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
      m = \begin{pmatrix} m &amp; 0 &amp; 0 \\ 0 &amp; m &amp; 0 \\ 0 &amp; 0 &amp; m \end{pmatrix}
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;然后，我们假设这个m在某一条轴上与我们的目标矩阵缩放尺度相同。因为其处处相等，我们可以知道，其差是一个奇异的矩阵。那么便有：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
      det(A−λI)=0
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个方程被称为特征方程。解特征方程 ，得到特征值 &lt;code&gt;λ1,λ2,…,λn&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于每个特征值 λi，我们需要找到对应的特征向量 vi。特征向量是一个非零的向量，且满足：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
      (A−λi*I)vi=0
      $$&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于每一个特征值vi，我们执行这个解方程操作。这个方程组可能有多个解，但任何非零解都可以作为特征向量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将特征向量归一化，方便使用。当解出来的特征值存在相同项时，&lt;em&gt;&lt;strong&gt;不一定&lt;/strong&gt;&lt;/em&gt;有特征基。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8pca主成分分析&#34;&gt;8.&lt;em&gt;PCA&lt;/em&gt;（主成分分析）
&lt;/h1&gt;&lt;p&gt;​	&lt;strong&gt;PCA（主成分分析，Principal Component Analysis）&lt;strong&gt;是一种统计方法，它通过正交变换将一组可能相关的变量转换为一组线性无关的变量集，称为&lt;/strong&gt;&lt;u&gt;主成分&lt;/u&gt;&lt;/strong&gt;。PCA 通常用于降维，数据压缩，特征提取，以及在探索性数据分析中寻找数据中的模式。&lt;/p&gt;
&lt;h2 id=&#34;81-pca的作用&#34;&gt;8.1 PCA的作用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;降维&lt;/strong&gt;：减少数据的维度，降低计算复杂性，同时保留最重要的信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;去相关&lt;/strong&gt;：新的特征（主成分）是&lt;em&gt;线性无关&lt;/em&gt;的，这有助于消除原始数据中的多重共线性问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据压缩&lt;/strong&gt;：通过保留最重要的主成分，可以有效地压缩数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;可视化&lt;/strong&gt;：在高维数据集中，PCA 可以帮助将数据投影到二维或三维空间，以便于可视化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;噪声过滤&lt;/strong&gt;：PCA 可以通过去除数据中的噪声来提高模型的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据预处理&lt;/strong&gt;：在许多机器学习算法中，PCA 可以作为数据预处理步骤，以提高算法的效率和准确性。&lt;/p&gt;
&lt;h2 id=&#34;82-pca的使用&#34;&gt;8.2 PCA的使用
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;PCA的使用过程可以分为 步。假设我们拥有数据集&lt;em&gt;&lt;strong&gt;X&lt;/strong&gt;&lt;/em&gt;，则需按如下步骤进行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1.&lt;strong&gt;中心化&lt;/strong&gt;：将数据集中的每个特征减去其均值，使得新的数据集具有零均值。从视觉上看，这就像是将点移到了坐标轴中间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;假设我们有一个数据集X，其中包含n个样本和m个特征。中心化的过程可以表示为：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
        \mu = \begin{pmatrix} \frac{1}{n} \sum_{i=1}^{n} X_{i1}\frac{1}{n} \sum_{i=1}^{n} X_{i2} \\ \vdots \\ \frac{1}{n} \sum_{i=1}^{n} X_{im} \end{pmatrix}
        $$&lt;/li&gt;
&lt;li&gt;
$$
        X_{\text{centered}} = X - \mu
        $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2.&lt;strong&gt;协方差矩阵&lt;/strong&gt;:计算中心化数据的协方差矩阵，以了解特征之间的关系。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;协方差&lt;/strong&gt;：协方差可以方便的度量数据与数据之间对于彼此的&lt;u&gt;变化趋势&lt;/u&gt;。公式表示如下。其中 &lt;em&gt;&lt;strong&gt;μ&lt;/strong&gt;&lt;/em&gt; 是&lt;em&gt;&lt;strong&gt;X，Y&lt;/strong&gt;&lt;/em&gt;的均值。&lt;em&gt;&lt;strong&gt;E&lt;/strong&gt;&lt;/em&gt;是期望值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$
          Cov(X 
          i
          ​
           ,X 
          j
          ​
           )=E[(X 
          i
          ​
           −μ 
          i
          ​
           )(X 
          j
          ​
           −μ 
          j
          ​
           )]
          $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;方差&lt;/strong&gt;：方差可以方便的衡量数据在轴上的密集程度。方差定义为定义为该随机变量与其均值（期望值）之差的平方的期望值。公式表示如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$$
          Var(X)=E[(X−μ) 
          2
           ]
          $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过&lt;u&gt;协方差&lt;/u&gt;和&lt;u&gt;方差&lt;/u&gt;来定义协方差矩阵，定义如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
$$
          \text{Cov}(x, y) = \frac{1}{n-1} \sum_{i=1}^{n} (x_i - \mu_x)(y_i - \mu_y)
          $$&lt;/li&gt;
&lt;li&gt;
$$
          C = \text{Cov}(X) = \begin{bmatrix}
          \text{Var}(X_1) &amp; \text{Cov}(X_1, X_2) &amp; \cdots &amp; \text{Cov}(X_1, X_n) \\
          \text{Cov}(X_2, X_1) &amp; \text{Var}(X_2) &amp; \cdots &amp; \text{Cov}(X_2, X_n) \\
          \vdots &amp; \vdots &amp; \ddots &amp; \vdots \\
          \text{Cov}(X_n, X_1) &amp; \text{Cov}(X_n, X_2) &amp; \cdots &amp; \text{Var}(X_n)
          \end{bmatrix}
          $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3.&lt;strong&gt;特征值分解&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在已经计算出协方差矩阵的前提下，找出协方差矩阵的特征值和特征向量（被称为主成分）。因为协方差矩阵的转置不变的特点，所以特征向量必然正交。
&lt;ul&gt;
&lt;li&gt;特征值和特征向量计算的过程在前面有涉及。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4.&lt;strong&gt;选择主成分&lt;/strong&gt;：根据特征值的大小选择最重要的特征向量，特征值越大，对应的特征向量越重要。这些特征向量构成了新的特征空间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;根据我们要的目标空间的维度，选择对应数量的特征向量。优先选择特征值大的特征向量作为投影对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5.&lt;strong&gt;转换数据&lt;/strong&gt;：将数据&lt;strong&gt;投影&lt;/strong&gt;到对应的空间上，完成PCA。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;投影&lt;/strong&gt;的过程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;乘以目标空间的张成向量可以投影到目标空间上，而除以目标空间张量的范数可以避免发生延展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
$$
          A_P = A \frac{v}{\|v\|_2}
          $$&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h2 id=&#34;83-pca的局限性&#34;&gt;8.3 PCA的局限性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性假设&lt;/strong&gt;：PCA 假设数据的主成分是线性的，对于非线性结构可能不适用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对异常值敏感&lt;/strong&gt;：PCA 对异常值非常敏感，异常值可能会对主成分产生较大影响。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;9-总结&#34;&gt;9. 总结
&lt;/h1&gt;&lt;p&gt;线性代数作为数学的一个重要分支，在人工智能（AI）领域的应用至关重要。从基础的矩阵运算到复杂的线性变换，线性代数的概念和工具为AI算法的开发和优化提供了坚实的理论基础和计算框架。&lt;/p&gt;
&lt;h2 id=&#34;71-线性代数的核心作用&#34;&gt;7.1 线性代数的核心作用
&lt;/h2&gt;&lt;p&gt;线性代数的核心作用体现在以下几个方面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;理论基础&lt;/strong&gt;：线性代数为AI算法提供了理论支撑，使得算法的实现成为可能。例如，神经网络中的权重更新和反向传播算法依赖于矩阵和向量的运算。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;数据处理&lt;/strong&gt;：在AI中，数据通常以矩阵的形式表示，线性代数提供了处理和分析这些数据的有效工具，如特征提取和降维。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模型优化&lt;/strong&gt;：线性代数在模型优化中扮演着关键角色，尤其是在优化算法中，如梯度下降法，需要用到微积分和线性代数的知识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;算法创新&lt;/strong&gt;：许多新的AI算法，如卷积神经网络（CNN）和循环神经网络（RNN），都是基于线性代数的理论创新。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;72-线性代数的实际应用&#34;&gt;7.2 线性代数的实际应用
&lt;/h2&gt;&lt;p&gt;线性代数的实际应用包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;图像处理&lt;/strong&gt;：在计算机视觉中，线性变换用于图像的旋转、缩放和剪切等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;自然语言处理&lt;/strong&gt;：在线性代数的帮助下，可以实现词向量的转换和文本的特征提取。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化问题&lt;/strong&gt;：在线性代数的支持下，可以求解优化问题中的线性方程组，如在支持向量机（SVM）的训练过程中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;特征工程&lt;/strong&gt;：线性代数提供了特征归一化和相似性度量的工具，这对于特征选择和降维非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过对线性代数的深入理解和应用，AI研究者和实践者能够更好地设计和优化算法，处理和分析数据，从而推动AI技术的发展。线性代数不仅是AI学习的基础，也是实现AI应用的关键。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[NOTE]&lt;/p&gt;
&lt;p&gt;本篇存在一定AI辅助&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>更新日志</title>
        <link>https://SJTdreams.github.io/p/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</link>
        <pubDate>Sun, 29 Dec 2024 12:41:22 +0800</pubDate>
        
        <guid>https://SJTdreams.github.io/p/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</guid>
        <description>&lt;img src="https://SJTdreams.github.io/p/%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/title.jpeg" alt="Featured image of post 更新日志" /&gt;&lt;h3 id=&#34;更新日志&#34;&gt;更新日志
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2024.12.29 博客创建完毕&lt;/li&gt;
&lt;li&gt;2025.1.1 博客同步和发布完毕，基本功能齐全&lt;/li&gt;
&lt;li&gt;2025.1.2 加入标签云，加入画廊，加入音乐播放器&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>归档</title>
        <link>https://SJTdreams.github.io/archives/</link>
        <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/archives/</guid>
        <description></description>
        </item>
        <item>
        <title>关于作者</title>
        <link>https://SJTdreams.github.io/%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85/</link>
        <pubDate>Thu, 28 Feb 2019 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85/</guid>
        <description>&lt;p&gt;一个普通的学生。&lt;/p&gt;
&lt;p&gt;兴趣爱好广泛。包括游戏、番、写文、辩论、编程、学AI、看一些很酷的科普视频等。&lt;/p&gt;
&lt;p&gt;游戏方面上喜好独立游戏、gal、二游、rougelike、类银河恶魔城、沙盒、rpg、音游等多方面的游戏。自认为算是个二次元。&lt;/p&gt;
&lt;p&gt;在学习Unity、C#和深度学习。个人梦想是做出一个成功的独立游戏和开发出一个独一无二的AI。&lt;/p&gt;
&lt;p&gt;专注力差，喜好摸鱼。&lt;/p&gt;
&lt;p&gt;是纳西妲厨子（目移）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>搜索</title>
        <link>https://SJTdreams.github.io/search/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/search/</guid>
        <description></description>
        </item>
        <item>
        <title>相关链接</title>
        <link>https://SJTdreams.github.io/%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://SJTdreams.github.io/%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5/</guid>
        <description>&lt;p&gt;以下列出一些常用的网站，方便使用。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
